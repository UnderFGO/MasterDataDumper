name: generate

on:
  schedule:
      - cron: '0 0/1 * * *'
  workflow_dispatch:

jobs:
  dump:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2
      with:
        repository: karanokk/FGODumper
        token: ${{ secrets.PRIVATE_REPO_PAT }}
    
    - name: Setup env
      run: |
        echo '::set-env name=version_key::game-data-version'
        echo '::set-env name=version_filename::version_key.json'
        echo '::set-env name=master_filename::master.zip'
      shell: powershell

    - name: Download game data version
      uses: actions/download-artifact@v2
      with:
        name: $version_key

    - name: Build & run FGODumper
      id: product
      run: |
        nuget restore FGODumper.sln
        dotnet build --configuration Release FGODumper

        & '.\FGODumper\bin\Release\FGODumper.exe' $version_filename

        $masterPath = 'master.json'
        $isUpdated = Test-Path $masterPath
        echo '::set-output name=isUpdated::${isUpdated}'
        if ($isUpdated) {
          Compress-Archive -Path $masterPath -DestinationPath "${master_filename}"

          $versionJson = (Get-Content $version_filename) | ConvertFrom-Json
          $dateVer = $versionJson.dateVer;
          $updatedAt = (Get-Date '01-01-1970 00:00:00').AddSeconds($dateVer +9*3600)
          $updatedAt = Get-Date $updatedDate -UFormat '%B %d, %Y %R'
          echo "::set-output name=ver::${dateVer}";
          echo "::set-output name=updatedAt::${updatedAt}";
        }
      shell: powershell
    
    - name: Create Release
      if: steps.product.outputs.isUpdated == 'True'
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.product.outputs.ver }}
        release_name: MasterData ${{ steps.product.outputs.ver }}
        body: |
          Updated on ${{ steps.product.outputs.updatedAt }} UTC+9
        draft: false
        prerelease: false

    - name: Upload Release Asset
      if: steps.product.outputs.isUpdated == 'True'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: $master_filename
        asset_name: $master_filename
        asset_content_type: application/zip

    - name: Upload game data version
      if: steps.product.outputs.isUpdated == 'True'
      uses: actions/upload-artifact@v2
      with:
        name: $version_key
        path: ${version_filename}
          
